confusionMatrix.train(j48mod)
confusionMatrix.train(j48mod, norm="none")
confusionMatrix.train(j48mod, norm="overall")
confusionMatrix.train(j48mod, norm="average")
setwd("H:/MSc Data Science/CMM510- Data Mining/Week3 - 20191002")
library(caret)
library(mlbench)
library(RWeka)
library(rpart)
library(C50)
library(datasets)
ctrl <- trainControl(method = "repeatedcv",
repeats = 3,
verboseIter=TRUE)
j48mod <- train(Species ~ ., data = iris,
method = "J48",
tuneLength = 12,
trControl = ctrl)
summary(j48mod)
j48mod <- train(Species ~ ., data = iris,
method = "J48",
metric = "Accuracy",
tuneLength = 12,
trControl = ctrl)
summary(j48mod$finalModel)
confusionMatrix.train(j48mod)
j48mod <- train(Species ~ ., data = iris,
method = "J48",
metric = "Kappa",
tuneLength = 12,
trControl = ctrl)
summary(j48mod$finalModel)
confusionMatrix.train(j48mod)
confusionMatrix.train(j48mod, norm="none")
confusionMatrix.train(j48mod, norm="overall")
data(PimaIndiansDiabetes)
ctrl <- trainControl(method="repeatedcv", number=10, repeats=3)
Diabetes <- read.csv("H:/MSc Data Science/CMM510- Data Mining/Week1 - 20190918/dataFiles/diabetes.csv")
data(PimaIndiansDiabetes)
ctrl <- trainControl(method="repeatedcv", number=10, repeats=3)
View (Diabetes)
setwd("H:/MSc Data Science/CMM510- Data Mining/Week3 - 20191002")
library(caret)
library(mlbench)
library(RWeka)
library(rpart)
library(C50)
library(datasets)
#Diabetes <- read.csv("H:/MSc Data Science/CMM510- Data Mining/Week1 - 20190918/dataFiles/diabetes.csv")
data(PimaIndiansDiabetes)
ctrl <- trainControl(method="repeatedcv", number=10, repeats=3)
#use several algorithms: CART, kNN, J48.
# CART
# setting the seed makes the experiment reproducible.
set.seed(1)
mod.cart <- train(diabetes~.,
data=PimaIndiansDiabetes,
method="rpart",
trControl=ctrl)
# kNN
set.seed(1)
mod.knn <- train(diabetes~.,
data=PimaIndiansDiabetes,
method="knn",
trControl=ctrl)
# j48
set.seed(1)
mod.j48 <- train(diabetes~.,
data=PimaIndiansDiabetes,
method="J48",
trControl=ctrl)
# collect resamples
results <- resamples(list(CART=mod.cart, KNN=mod.knn, j48=mod.j48))
#Plotting results
scales <- list(x=list(relation="free"), y=list(relation= "free"))
dotplot(results, scales=scales, conf.level = 0.95)
pwd
cwd
wd
getwd
setwd("H:/MSc Data Science/CMM510- Data Mining/Week9 - 20191118")
#setwd("H:/MSc Data Science/CMM510- Data Mining/Week9 - 20191118")
library (mlbench)
library (caret)
library (caretEnsemble)
library (C50)
library (dplyr)
library (gbm)
#setwd("H:/MSc Data Science/CMM510- Data Mining/Week9 - 20191118")
library (mlbench)
library (caret)
library (caretEnsemble)
library (C50)
library (dplyr)
install (gbm)
#setwd("H:/MSc Data Science/CMM510- Data Mining/Week9 - 20191118")
library (mlbench)
library (caret)
library (caretEnsemble)
library (C50)
library (dplyr)
#install (gbm)
library (fastAdaboost)
library (xgboost)
library (ipred)
library (e1071)
library (randomForest)
library (pROC)
library (earth)
library (mda)
data(Ionosphere)
View(Ionosphere)
data(Ionosphere)
View(Ionosphere)
proc_ionos <- Ionosphere
proc_ionos <- proc_ionos[,-2]
proc_ionos$V1 <- as.numeric(as.character(proc_ionos$V1))
View(proc_ionos)
#setwd("H:/MSc Data Science/CMM510- Data Mining/Week9 - 20191118")
library (mlbench)
library (caret)
library (caretEnsemble)
library (C50)
library (dplyr)
install.packages ("gbm")
library (fastAdaboost)
library (xgboost)
library (ipred)
library (e1071)
library (randomForest)
library (pROC)
library (earth)
library (mda)
#setwd("H:/MSc Data Science/CMM510- Data Mining/Week9 - 20191118")
library (mlbench)
library (caret)
library (caretEnsemble)
library (C50)
library (dplyr)
library (gbm)
library (fastAdaboost)
library (xgboost)
library (ipred)
library (e1071)
library (randomForest)
library (pROC)
library (earth)
library (mda)
# J48
set.seed(1)
J48.mod <- train(Class~., data=proc_ionos, method="J48", metric="Accuracy", trControl=control)
control <- trainControl(method="repeatedcv", number=10, repeats=3)
# J48
set.seed(1)
J48.mod <- train(Class~., data=proc_ionos, method="J48", metric="Accuracy", trControl=control)
# C5.0
set.seed(1)
C50.mod <- train(Class~., data=proc_ionos, method="C5.0", metric="Accuracy", trControl=control)
# AdaBoost
set.seed(1)
adabo.mod <- train(Class~., data=proc_ionos, method="adaboost", metric="Accuracy", trControl=control, verbose=FALSE)
#Extreme gradient boosting
set.seed(1)
xgb.mod <- train(Class~., data=proc_ionos, method="xgbTree", metric="Accuracy", trControl=control, verbose=FALSE)
# Stochastic Gradient Boosting
set.seed(1)
gbm.mod <- train(Class~., data=proc_ionos, method="gbm", metric="Accuracy", trControl=control, verbose=FALSE)
results <- resamples(list(j48 = J48.mod, c5.0=C50.mod, adaboost= adabo.mod, xgb=xgb.mod, gbm=gbm.mod))
summary(results)
dotplot(results)
# plot 10 most important variables in the model.
plot(varImp(J48.mod), top=10)
# C5.0
set.seed(1)
C50.mod <- train(Class~., data=proc_ionos, method="C5.0", metric="Accuracy", trControl=control)
#Bagged Ada – this takes a while so you may skip it!
#set.seed(1)
#adab.mod <- train(Class~., data=proc_ionos, method="AdaBag", metric="Accuracy", trControl=control, verbose=FALSE)
# Bagged CART
set.seed(1)
bcart.mod <- train(Class~., data=proc_ionos, method="treebag", metric="Accuracy", trControl=control)
# Random Forest
set.seed(1)
rf.mod <- train(Class~., data=proc_ionos, method="rf", metric="Accuracy", trControl=control)
# summarize results – if you have skipped adabag, remove it from the results list
#results <- resamples(list(c50 = C50.mod, adabag = adab.mod, treebag=bcart.mod, rf=rf.mod))
results <- resamples(list(c50 = C50.mod, treebag=bcart.mod, rf=rf.mod))
summary(results)
dotplot(results)
control <- trainControl(method="repeatedcv", number=10, repeats=3, savePredictions=TRUE, classProbs=TRUE)
baseAlgo <- c('lda', 'rpart', 'glm', 'knn', 'svmRadial')
set.seed(1)
baseModels <- caretList(Class~., data=proc_ionos, trControl=control, methodList=baseAlgo)
results <- resamples(baseModels)
summary(results)
dotplot(results)
modelCor(results)
splom(results)
stackControl <- trainControl(method="repeatedcv", number=10, repeats=3, savePredictions=TRUE, classProbs=TRUE)
set.seed(1)
ensembleStack <- caretStack(baseModels, method="glm", metric="Accuracy", trControl=stackControl)
print(ensembleStack)
contactLenses <- read.csv("contactLenses.csv", header=T)
contactLenses <- read.csv("H:\MSc Data Science\CMM510 - Data Mining\Week1 - 20190918\dataFiles\contactLenses.csv", header=T)
contactLenses <- read.csv("H:/MSc Data Science/CMM510- Data Mining/Week1 - 20190918/dataFiles/contactLenses.csv", header=T)
contactLenses <- read.csv("H:/MSc Data Science/CMM510- Data Mining/Week1 - 20190918/dataFiles/contactLenses.csv", header=T)
contactLenses <- read.csv("H:/MSc Data Science/CMM510- Data Mining/Week1 - 20190918/dataFiles/contactLenses.csv", header=T)
contactLenses <- read.csv ("H:/MSc Data Science/CMM510- Data Mining/Week1 - 20190918/dataFiles/contactLenses.csv", header=T)
contactLenses <- read.csv("H:/MSc Data Science/CMM510- Data Mining/Week1 - 20190918/dataFiles/contactLenses.csv", header=T)
contactLenses <- read.csv("H:/MSc Data Science/CMM510 - Data Mining/Week1 - 20190918/dataFiles/contactLenses.csv", header=T)
ctrl <- trainControl(method="repeatedcv", number=5, repeats=2)
ctrl <- trainControl(method="repeatedcv", number=5, repeats=2)
library (naivebayes)
library (caret)
library(caret)
library (naivebayes)
library (caret)
library (naivebayes)
install.packages ("caret")
library (mlbench)
library (rWeka)
library (naivebayes)
install.packages ("caret")
library (mlbench)
install.packages ("rWeka")
library (naivebayes)
install.packages ("caret")
library (mlbench)
install.packages ("rWeka")
install.packages ("Rtools")
library (naivebayes)
install.packages ("caret")
library (mlbench)
install.packages ("RWeka")
install.packages ("Rtools")
ctrl <- trainControl(method="repeatedcv", number=5, repeats=2)
library (naivebayes)
install.packages ("caret")
library (mlbench)
install.packages ("RWeka")
install.packages ("Rtools")
library (naivebayes)
library (caret)
library(caret)
library(RWeka)
ctrl <- trainControl(method="repeatedcv", number=5, repeats=2)
set.seed(1)
NBmodCL <- train(contactLenses ~., contactLenses,
method = "naive_bayes", na.action = na.omit,
trControl = ctrl)
library (naivebayes)
library (caret)
library(rlang)
install.packages("rlang")
library (naivebayes)
library (caret)
install.packages("rlang")
library (naivebayes)
library (caret)
library (naivebayes)
library (caret)
library (naivebayes)
library (caret)
library(caret)
library (naivebayes)
library (caret)
library (naivebayes)
library (caret)
library(caret)
library(rlang)
library (naivebayes)
library (caret)
ctrl <- trainControl(method="repeatedcv", number=5, repeats=2)
library (naivebayes)
library (caret)
?predict
library (naivebayes)
library (caret)
library(datasets)
WeatherPlay
library(partykit)
WeatherPlay
data("WeatherPlay")
rm WWeatherPlay
rm WeatherPlay
View(WeatherPlay)
drop WeatherPlay
??
getwd()
setwd("H:\MSc Data Science\CMM535 - Data Science Development\Week 2 - 20200204")
setwd("H:/MSc Data Science/CMM535 - Data Science Development/Week 2 - 20200204")
getwd()
stateDataLong <- read.csv("stateDataLong.csv")
head(stateDataLong,5)
summary(stateDataLong)
str(stateDataLong)
head(stateDataLong,5)
View(stateDataLong)
type(stateDataLong)
stateDataLong$state.type
typeof(stateDataLong$state)
typeof(stateDataLong)
typeof(stateDataLong$state,stateDataLong$indicator,stateDataLong$value)
typeof(stateDataLong$state;stateDataLong$indicator;stateDataLong$value)
summary(stateDataLong)
str(stateDataLong)
head(stateDataLong,5)
View(stateDataLong)
typeof(stateDataLong$state;stateDataLong$indicator;stateDataLong$value)
typeof(stateDataLong$state)
typeof(stateDataLong$indicator)
typeof(stateDataLong$value)
typeof(stateDataLong$value), typeof(stateDataLong$state)
stateDatawide <- spread(stateDataLong, indicator, value)
library(tidyr)
stateDatawide <- spread(stateDataLong, indicator, value)
View(stateDatawide)
str?
;
help(str)
str(stateDataWide)
str(stateDatawide)
summary(stateDatawide)
complete.cases(stateDataWide)
complete.cases(stateDataWide)
stateDataWide <- stateDataWide
stateDataWide <- stateDatawide
stateDatawide <- NULL
help(rm)
rm(stateDatawide)
ls
help(ls)
ls(all.names)
ls()
complete.cases(stateDataWide)
sum(complete.cases(stateDataWide))
sum(!complete.cases(stateDataWide))
stateDataWide[complete.cases(stateDataWide),]
stateDataWide[complete.cases(stateDataWide),stateDataWide$state]
stateDataWide[complete.cases(stateDataWide),state]
stateDataWide[complete.cases(stateDataWide),$state]
stateDataWide[(complete.cases(stateDataWide),$state),]
stateDataWide[(complete.cases(stateDataWide);$state),]
stateDataWide[complete.cases(stateDataWide),]
stateDataWide[!complete.cases(stateDataWide),]
replace_na(stateDataWide$Illiteracy,0)
stateDataWide$Illiteracy
stateDataWide$Illiteracy
stateDataWide$Illiteracy <- replace_na(stateDataWide$Illiteracy,0)
stateDataWide$Illiteracy
help("replace")
replace(stateDataWide$Illiteracy, 0, NA)
stateDataWide$Illiteracy
replace(stateDataWide$Illiteracy, 0, NA)
replace(stateDataWide$Illiteracy, 0, NA())
replace(stateDataWide$Illiteracy, NA, 0)
replace(stateDataWide$Illiteracy, 0, NA)
replace(stateDataWide$Illiteracy, 0, NA())
stateDataWide$Illiteracy == 0
stateDataWide$Illiteracy == 0 <- NA
stateDataWide$Illiteracy == 0 <- stateDataWide$Illiteracy == NA
[stateDataWide$Illiteracy == 0] <- NA
stateDataWide[stateDataWide$Illiteracy == 0] <- NA
stateDataWide[$Illiteracy == 0] <- NA
stateDataWide[Illiteracy == 0] <- NA
[stateDataWide$Illiteracy == 0] <- NA
stateDataWide$Illiteracy [== 0] <- NA
stateDataWide[stateDataWide$Illiteracy== 0] <- NA
stateDataWide$Illiteracy
typeof(stateDataWide$Illiteracy)
stateDataWide[stateDataWide$Illiteracy== 0] #<- NA
stateDataWide[stateDataWide$Illiteracy==0] #<- NA
stateDataWide[$Illiteracy==0] #<- NA
stateDataWide$Illiteracy==0 #<- NA
stateDataWide$Illiteracy==0 <- NA
[stateDataWide$Illiteracy==0] <- NA
stateDataWide[stateDataWide$Illiteracy==0] <- NA
stateDataWide[stateDataWide$Illiteracy==0,] <- NA
stateDataWide$Illiteracy
stateDataWide$Illiteracy
stateDataWide$Illiteracy <- replace_na(stateDataWide$Illiteracy,mean(stateDataWide$Illiteracy))
stateDataWide$Illiteracy
stateDataWide$Illiteracy <- replace_na(stateDataWide$Illiteracy,mean(stateDataWide$Illiteracy))
stateDataWide$Illiteracy
stateDataWide$Illiteracy <- replace_na(stateDataWide$Illiteracy,rm.na(mean(stateDataWide$Illiteracy)))
stateDataWide$Illiteracy <- replace_na(stateDataWide$Illiteracy,na.rm(mean(stateDataWide$Illiteracy)))
help(na.rm)
stateDataWide$Illiteracy <- replace_na(stateDataWide$Illiteracy,mean(complete.cases(stateDataWide$Illiteracy)))
stateDataWide$Illiteracy
mean(stateDataWide$Illiteracy)
stateDataWide$Income
stateDataWide$Income
stateDataWide$Murder
stateDataWide$Income <- replace_na(stateDataWide$Income, min(stateDataWide$Income, na.rm=TRUE))
stateDataWide$Income
stateDataWide$Murder <- replace_na(stateDataWide$Murder, median(stateDataWide$Murder, na.rm=True))
stateDataWide$Murder <- replace_na(stateDataWide$Murder, median(stateDataWide$Murder, na.rm=TRUE))
stateDataWide$Murder
#3 Data transformation
stateDataComplete <- data.frame(state.x77)
stateDataComplete
stateDataComplete[,"Area.km2"] <- stateDataComplete[,"Area"]*1.609^2
stateDataComplete
#3 Data transformation task
stateDataComplete[,"population.density"] <- stateDataComplete[,"Population"]/stateDataComplete[,"Area.km2"]
stateDataComplete
#3 further data transformation
library(dplyr)
stateDataComplete <- mutate(stateDataComplete,
size = case_when(Area >100000 ~ "huge", Area > 50000 ~ "medium", TRUE ~ "small"))
stateDataComplete
stateDataComplete$size <- factor(stateDataComplete$size,
levels = c("small","medium","large"),
ordered = TRUE)
stateDataComplete
stateDataWide$Area
stateDataComplete$Area
stateDataComplete$size
stateDataComplete[,($size,$area)]
stateDataComplete[,(size,Area)]
stateDataComplete[,("size","Area")]
stateDataComplete[,"size"]
select(stateDataComplete,size, Area)
stateDataComplete <- mutate(stateDataComplete,
size = case_when(Area >100000 ~ "huge", Area > 50000 ~ "medium", TRUE ~ "small"))
select(stateDataComplete,size, Area)
stateDataComplete$size <- factor(stateDataComplete$size,
levels = c("small","medium","huge"),
ordered = TRUE)
select(stateDataComplete,size, Area)
stateDataComplete[,1:2]
stateDataComplete[,c(1,5)]
stateDataComplete[,c("Area","size")]
# Data transformation task 2
stateDataComplete[,"HS.Grad"] <- stateDataComplete[,"HS.Grad"]/100
stateDataComplete
stateDataComplete <- mutate(stateDataComplete,
Dangerous = case_when(Murder > 10))
stateDataComplete <- mutate(stateDataComplete,
Concern = case_when(Murder > 10 ~ "Dangerous", Life.Exp <= 70 ~ "Unhealthy", TRUE ~ "Fine" ))
stateDataComplete
stateDataComplete[,c("Murder","Life.Exp","Concern")]
d1 <- "March 29 1985 12:00:00"
d2 <- "Jun 30, 1985 15:33:03"
d3 <- "Jun 30, 1985 09:00:00 pm"
d4 <- "04/29/1985 12:31:01.543"
d5 <- "29-10-1985 12:31:01"
d6 <- 1104295502
dts <- c(d1,d2,d3,d4,d5,d6)
dts
as.POSIXct(dts, format="%Y-%m-%d %H:%M:%S", tz = "GMT")
as.POSIXct(d1, format="%Y-%m-%d %H:%M:%S", tz = "GMT")
dtschange <- as.POSIXct(d1, format="%Y-%m-%d %H:%M:%S", tz = "GMT")
dtschange
as.POSIXct(d1, format="%Y-%m-%d %H:%M:%S", tz = "GMT")
dts
help("POSIXct")
typeof(d1)
d1.new <- as.POSIXct(d1, format="%Y-%m-%d %H:%M:%S", tz = "GMT")
d1.new
d1.new <- as.POSIXct(d1, format="%Y-%m-%d %H:%M:%S")
d1.new
d1.new <- as.POSIXct(d1, format="%Y")
d1.new
help("as.POSIXct")
d1.new <- as.POSIXct(d1, format="%B %d %Y %H:%M:%S")
d1.new
d1.new <- as.POSIXct(d1, format="%B %d %Y %H:%M:%S", tz = GMT)
d1.new <- as.POSIXct(d1, format="%B %d %Y %H:%M:%S", tz = "GMT")
d1.new
class(d1.new)
typeof(d1.new)
d1 <- "March 29 1985 12:00:00"
d2 <- "Jun 30, 1985 15:33:03"
d3 <- "Jun 30, 1985 09:00:00 pm"
d4 <- "04/29/1985 12:31:01.543"
d5 <- "29-10-1985 12:31:01"
d6 <- 1104295502
d1.new <- as.POSIXct(d1, format="%B %d %Y %H:%M:%S", tz = "GMT")
d2.new <- as.POSIXct(d2, format="%b %d, %Y %X")
d3.new <- as.POSIXct(d3, format="%b %d, %Y %r")
d4.new <- as.POSIXct(d4, format="%d/%m/%Y %X")
d5.new <- as.POSIXct(d5, format="%d-%m-%Y %X")
d6.new <- as.POSIXct("January 1, 1970", format = "%B %d, %Y", tz="GMT")+d6
d1.new
d2.new
d3.new
d4.new
d5.new
d6.new
d1.new <- as.POSIXct(d1, format="%B %d %Y %H:%M:%S", tz = "GMT")
d2.new <- as.POSIXct(d2, format="%b %d, %Y %X", tz = "GMT")
d3.new <- as.POSIXct(d3, format="%b %d, %Y %r", tz = "GMT")
d4.new <- as.POSIXct(d4, format="%d/%m/%Y %X", tz = "GMT")
d5.new <- as.POSIXct(d5, format="%d-%m-%Y %X", tz = "GMT")
d6.new <- as.POSIXct("January 1, 1970", format = "%B %d, %Y", tz="GMT")+d6
d1.new
d2.new
d3.new
d4.new
d5.new
d6.new
d4.new <- as.POSIXct(d4, format="%d/%m/%Y %H:%M:%OS3", tz = "GMT")
d4.new
d4.new <- as.POSIXct(d4, format="%d/%m/%Y %H:%M:%OS", tz = "GMT")
d4.new
d4.new <- as.POSIXct(d4, format="%d/%m/%Y %H:%M:%OSn", tz = "GMT")
d4.new
d4.new <- as.POSIXct(d4, format="%d/%m/%Y %H:%M:%OS", tz = "GMT")
d4.new
d4.new <- as.POSIXct(d4, format="%d/%m/%Y %H:%M:%S.%OS", tz = "GMT")
d4.new
